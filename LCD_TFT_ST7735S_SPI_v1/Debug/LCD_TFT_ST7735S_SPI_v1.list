
LCD_TFT_ST7735S_SPI_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004278  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa8  08006aa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006aa8  08006aa8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006aa8  08006aa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08006abc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08006abc  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b70  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be8  00000000  00000000  00028bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025563  00000000  00000000  0002b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4b5  00000000  00000000  00050dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2908  00000000  00000000  0005b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013db80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002198  00000000  00000000  0013dbd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002818 	.word	0x08002818

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002818 	.word	0x08002818

080001c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <MX_DMA_Init+0x38>)
 80001d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001d2:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <MX_DMA_Init+0x38>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6493      	str	r3, [r2, #72]	; 0x48
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <MX_DMA_Init+0x38>)
 80001dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	607b      	str	r3, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2100      	movs	r1, #0
 80001ea:	200f      	movs	r0, #15
 80001ec:	f000 fd39 	bl	8000c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80001f0:	200f      	movs	r0, #15
 80001f2:	f000 fd52 	bl	8000c9a <HAL_NVIC_EnableIRQ>

}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000

08000204 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020a:	f107 030c 	add.w	r3, r7, #12
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021a:	4b18      	ldr	r3, [pc, #96]	; (800027c <MX_GPIO_Init+0x78>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a17      	ldr	r2, [pc, #92]	; (800027c <MX_GPIO_Init+0x78>)
 8000220:	f043 0304 	orr.w	r3, r3, #4
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b15      	ldr	r3, [pc, #84]	; (800027c <MX_GPIO_Init+0x78>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0304 	and.w	r3, r3, #4
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b12      	ldr	r3, [pc, #72]	; (800027c <MX_GPIO_Init+0x78>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	4a11      	ldr	r2, [pc, #68]	; (800027c <MX_GPIO_Init+0x78>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <MX_GPIO_Init+0x78>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	f641 0104 	movw	r1, #6148	; 0x1804
 8000250:	480b      	ldr	r0, [pc, #44]	; (8000280 <MX_GPIO_Init+0x7c>)
 8000252:	f001 f8df 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000256:	f641 0304 	movw	r3, #6148	; 0x1804
 800025a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025c:	2301      	movs	r3, #1
 800025e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000268:	f107 030c 	add.w	r3, r7, #12
 800026c:	4619      	mov	r1, r3
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <MX_GPIO_Init+0x7c>)
 8000270:	f000 ff26 	bl	80010c0 <HAL_GPIO_Init>

}
 8000274:	bf00      	nop
 8000276:	3720      	adds	r7, #32
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400

08000284 <lcd_cmd>:
#define CMD(x)					((x) | 0x100)


//The two functions below send a byte to LCD, and mark it as data or command via DC pin
static void lcd_cmd(uint8_t cmd)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); //command
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <lcd_cmd+0x38>)
 8000296:	f001 f8bd 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a0:	4806      	ldr	r0, [pc, #24]	; (80002bc <lcd_cmd+0x38>)
 80002a2:	f001 f8b7 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &cmd, sizeof(cmd));
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	2201      	movs	r2, #1
 80002aa:	4619      	mov	r1, r3
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <lcd_cmd+0x3c>)
 80002ae:	f001 ff99 	bl	80021e4 <HAL_SPI_Transmit_DMA>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	48000400 	.word	0x48000400
 80002c0:	20000028 	.word	0x20000028

080002c4 <lcd_data>:

static void lcd_data(uint8_t data)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); //data
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d4:	4809      	ldr	r0, [pc, #36]	; (80002fc <lcd_data+0x38>)
 80002d6:	f001 f89d 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e0:	4806      	ldr	r0, [pc, #24]	; (80002fc <lcd_data+0x38>)
 80002e2:	f001 f897 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &data, sizeof(data));
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	2201      	movs	r2, #1
 80002ea:	4619      	mov	r1, r3
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <lcd_data+0x3c>)
 80002ee:	f001 ff79 	bl	80021e4 <HAL_SPI_Transmit_DMA>
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	48000400 	.word	0x48000400
 8000300:	20000028 	.word	0x20000028

08000304 <lcd_send>:

//The function below sends data to LCD, with differentiation between data and commands
static void lcd_send(uint16_t value)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) //bit 9 is 1 - this is a command
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <lcd_send+0x20>
	{
		lcd_cmd(value); //most important byte is skipped, as it's only used to mark
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffb1 	bl	8000284 <lcd_cmd>
	}
	else
	{	//bit 9 is 0 - this is a value for a command that was sent before
		lcd_data(value);
	}
}
 8000322:	e004      	b.n	800032e <lcd_send+0x2a>
		lcd_data(value);
 8000324:	88fb      	ldrh	r3, [r7, #6]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffcb 	bl	80002c4 <lcd_data>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <lcd_init>:

  //Just commands and data and so on
};

void lcd_init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2104      	movs	r1, #4
 8000342:	4817      	ldr	r0, [pc, #92]	; (80003a0 <lcd_init+0x68>)
 8000344:	f001 f866 	bl	8001414 <HAL_GPIO_WritePin>
  //Delays needed because the producer said so
  HAL_Delay(100); //They can probably be shorter but I haven't checked
 8000348:	2064      	movs	r0, #100	; 0x64
 800034a:	f000 fb8b 	bl	8000a64 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	2104      	movs	r1, #4
 8000352:	4813      	ldr	r0, [pc, #76]	; (80003a0 <lcd_init+0x68>)
 8000354:	f001 f85e 	bl	8001414 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f000 fb83 	bl	8000a64 <HAL_Delay>

  //Sending all that stuff from init table
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++)
 800035e:	2300      	movs	r3, #0
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	e009      	b.n	8000378 <lcd_init+0x40>
  {
    lcd_send(init_table[i]);
 8000364:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <lcd_init+0x6c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffc9 	bl	8000304 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b4b      	cmp	r3, #75	; 0x4b
 800037c:	d9f2      	bls.n	8000364 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 800037e:	20c8      	movs	r0, #200	; 0xc8
 8000380:	f000 fb70 	bl	8000a64 <HAL_Delay>

  //Waking up and turning on
  lcd_cmd(ST7735S_SLPOUT);
 8000384:	2011      	movs	r0, #17
 8000386:	f7ff ff7d 	bl	8000284 <lcd_cmd>
  HAL_Delay(120);
 800038a:	2078      	movs	r0, #120	; 0x78
 800038c:	f000 fb6a 	bl	8000a64 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000390:	2029      	movs	r0, #41	; 0x29
 8000392:	f7ff ff77 	bl	8000284 <lcd_cmd>
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	48000400 	.word	0x48000400
 80003a4:	08002830 	.word	0x08002830

080003a8 <lcd_data16>:

//This function splits 16 bit data into 8 bits data, as the word length is 8 bits
static void lcd_data16(uint16_t value)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8); //MSB first
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff82 	bl	80002c4 <lcd_data>
	lcd_data(value);
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff7d 	bl	80002c4 <lcd_data>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	60f8      	str	r0, [r7, #12]
 80003da:	60b9      	str	r1, [r7, #8]
 80003dc:	607a      	str	r2, [r7, #4]
 80003de:	603b      	str	r3, [r7, #0]
	//Here the defined offsets can be used
	lcd_cmd(ST7735S_CASET); //Sets start and stop columns
 80003e0:	202a      	movs	r0, #42	; 0x2a
 80003e2:	f7ff ff4f 	bl	8000284 <lcd_cmd>
	lcd_data16(LCD_OFFSET_X + x);
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffdc 	bl	80003a8 <lcd_data16>
	lcd_data16(LCD_OFFSET_X + x + width - 1);
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	4413      	add	r3, r2
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	3b01      	subs	r3, #1
 80003fe:	b29b      	uxth	r3, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff ffd1 	bl	80003a8 <lcd_data16>

	lcd_cmd(ST7735S_RASET); //Sets start and stop rows
 8000406:	202b      	movs	r0, #43	; 0x2b
 8000408:	f7ff ff3c 	bl	8000284 <lcd_cmd>
	lcd_data16(LCD_OFFSET_Y + y);
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	b29b      	uxth	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ffc9 	bl	80003a8 <lcd_data16>
	lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	b29a      	uxth	r2, r3
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	4413      	add	r3, r2
 8000420:	b29b      	uxth	r3, r3
 8000422:	3b01      	subs	r3, #1
 8000424:	b29b      	uxth	r3, r3
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ffbe 	bl	80003a8 <lcd_data16>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <lcd_fill_box>:

//This function fills a box with a color
void lcd_fill_box(int x, int y, int width, int height, uint16_t color)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
 8000440:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height); //set working area
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	68b9      	ldr	r1, [r7, #8]
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f7ff ffc2 	bl	80003d2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR); //send command and then colors
 800044e:	202c      	movs	r0, #44	; 0x2c
 8000450:	f7ff ff18 	bl	8000284 <lcd_cmd>
	for (int i = 0; i < width * height; i++)
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	e006      	b.n	8000468 <lcd_fill_box+0x34>
	{
		lcd_data16(color);
 800045a:	8c3b      	ldrh	r3, [r7, #32]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffa3 	bl	80003a8 <lcd_data16>
	for (int i = 0; i < width * height; i++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	fb02 f303 	mul.w	r3, r2, r3
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	429a      	cmp	r2, r3
 8000474:	dbf1      	blt.n	800045a <lcd_fill_box+0x26>
	}
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_draw_image>:

//This function draws an image, for example from the array in image.c, provided
//in the example -- instead of sending pixel by pixel, you send all the image
//in one transmit command, which is faster
void lcd_draw_image(int x, int y, int width, int height, const uint8_t* data)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	60f8      	str	r0, [r7, #12]
 8000488:	60b9      	str	r1, [r7, #8]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	603b      	str	r3, [r7, #0]
	lcd_set_window(x, y, width, height); //set working area
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	68b9      	ldr	r1, [r7, #8]
 8000494:	68f8      	ldr	r0, [r7, #12]
 8000496:	f7ff ff9c 	bl	80003d2 <lcd_set_window>

	lcd_cmd(ST7735S_RAMWR);
 800049a:	202c      	movs	r0, #44	; 0x2c
 800049c:	f7ff fef2 	bl	8000284 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a6:	480d      	ldr	r0, [pc, #52]	; (80004dc <lcd_draw_image+0x5c>)
 80004a8:	f000 ffb4 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <lcd_draw_image+0x5c>)
 80004b4:	f000 ffae 	bl	8001414 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)data, width * height * 2);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	b29b      	uxth	r3, r3
 80004c0:	fb12 f303 	smulbb	r3, r2, r3
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	69b9      	ldr	r1, [r7, #24]
 80004ce:	4804      	ldr	r0, [pc, #16]	; (80004e0 <lcd_draw_image+0x60>)
 80004d0:	f001 fe88 	bl	80021e4 <HAL_SPI_Transmit_DMA>

}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	48000400 	.word	0x48000400
 80004e0:	20000028 	.word	0x20000028

080004e4 <lcd_clear>:

//This function fills the display with color white
void lcd_clear()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af02      	add	r7, sp, #8
	lcd_fill_box(0, 0, WIDTH, HEIGHT, 0xFFFF);
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	22a0      	movs	r2, #160	; 0xa0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ff9c 	bl	8000434 <lcd_fill_box>
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <lcd_transfer_done>:

//Deselecting the device after transfer
void lcd_transfer_done(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	4802      	ldr	r0, [pc, #8]	; (8000518 <lcd_transfer_done+0x14>)
 8000510:	f000 ff80 	bl	8001414 <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	48000400 	.word	0x48000400

0800051c <HAL_SPI_TxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
//This tells us that communication is done and we can deselect SPI device
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_SPI_TxCpltCallback+0x1c>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d101      	bne.n	8000530 <HAL_SPI_TxCpltCallback+0x14>
	{
		lcd_transfer_done();
 800052c:	f7ff ffea 	bl	8000504 <lcd_transfer_done>
	}
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000028 	.word	0x20000028

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fa1a 	bl	800097a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f85f 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f7ff fe5b 	bl	8000204 <MX_GPIO_Init>
  MX_DMA_Init();
 800054e:	f7ff fe3b 	bl	80001c8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000552:	f000 f8b1 	bl	80006b8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000556:	f7ff feef 	bl	8000338 <lcd_init>
  lcd_clear();
 800055a:	f7ff ffc3 	bl	80004e4 <lcd_clear>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fa7f 	bl	8000a64 <HAL_Delay>

  //The below produces a rainbow-like screen and then draws a Linux logo
  //in top-left corner
  lcd_fill_box(0, 0, 160, 16, RED);
 8000566:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2310      	movs	r3, #16
 800056e:	22a0      	movs	r2, #160	; 0xa0
 8000570:	2100      	movs	r1, #0
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff5e 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 16, 160, 16, GREEN);
 8000578:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2310      	movs	r3, #16
 8000580:	22a0      	movs	r2, #160	; 0xa0
 8000582:	2110      	movs	r1, #16
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff ff55 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 32, 160, 16, BLUE);
 800058a:	231f      	movs	r3, #31
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2310      	movs	r3, #16
 8000590:	22a0      	movs	r2, #160	; 0xa0
 8000592:	2120      	movs	r1, #32
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff4d 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 48, 160, 16, YELLOW);
 800059a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2310      	movs	r3, #16
 80005a2:	22a0      	movs	r2, #160	; 0xa0
 80005a4:	2130      	movs	r1, #48	; 0x30
 80005a6:	2000      	movs	r0, #0
 80005a8:	f7ff ff44 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 64, 160, 16, MAGENTA);
 80005ac:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2310      	movs	r3, #16
 80005b4:	22a0      	movs	r2, #160	; 0xa0
 80005b6:	2140      	movs	r1, #64	; 0x40
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff3b 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 80, 160, 16, CYAN);
 80005be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2310      	movs	r3, #16
 80005c6:	22a0      	movs	r2, #160	; 0xa0
 80005c8:	2150      	movs	r1, #80	; 0x50
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ff32 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 96, 160, 16, WHITE);
 80005d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2310      	movs	r3, #16
 80005d8:	22a0      	movs	r2, #160	; 0xa0
 80005da:	2160      	movs	r1, #96	; 0x60
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ff29 	bl	8000434 <lcd_fill_box>
  lcd_fill_box(0, 112, 160, 16, BLACK);
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2310      	movs	r3, #16
 80005e8:	22a0      	movs	r2, #160	; 0xa0
 80005ea:	2170      	movs	r1, #112	; 0x70
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff ff21 	bl	8000434 <lcd_fill_box>

  //Also make sure that the provided resolution is equal to your image resolution
  lcd_draw_image(0, 0, 84, 100, image_data);
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <main+0xc8>)
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	2254      	movs	r2, #84	; 0x54
 80005fa:	2100      	movs	r1, #0
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ff3f 	bl	8000480 <lcd_draw_image>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000602:	e7fe      	b.n	8000602 <main+0xc6>
 8000604:	080028c8 	.word	0x080028c8

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	; 0x58
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2244      	movs	r2, #68	; 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f002 f8f6 	bl	8002808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800062e:	f000 ff17 	bl	8001460 <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000638:	f000 f838 	bl	80006ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800063c:	2310      	movs	r3, #16
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ff4d 	bl	800150c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000678:	f000 f818 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb15 	bl	8001cc4 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a0:	f000 f804 	bl	80006ac <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3758      	adds	r7, #88	; 0x58
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_SPI2_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_SPI2_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_SPI2_Init+0x74>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_SPI2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_SPI2_Init+0x74>)
 80006d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80006d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_SPI2_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006de:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_SPI2_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_SPI2_Init+0x74>)
 80006e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_SPI2_Init+0x74>)
 80006ee:	2210      	movs	r2, #16
 80006f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_SPI2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_SPI2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_SPI2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_SPI2_Init+0x74>)
 8000706:	2207      	movs	r2, #7
 8000708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_SPI2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_SPI2_Init+0x74>)
 8000712:	2208      	movs	r2, #8
 8000714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_SPI2_Init+0x74>)
 8000718:	f001 fcc0 	bl	800209c <HAL_SPI_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000722:	f7ff ffc3 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	40003800 	.word	0x40003800

08000734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a3a      	ldr	r2, [pc, #232]	; (800083c <HAL_SPI_MspInit+0x108>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d16d      	bne.n	8000832 <HAL_SPI_MspInit+0xfe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	4a39      	ldr	r2, [pc, #228]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6593      	str	r3, [r2, #88]	; 0x58
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a33      	ldr	r2, [pc, #204]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <HAL_SPI_MspInit+0x10c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800079e:	2308      	movs	r3, #8
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ae:	2305      	movs	r3, #5
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4822      	ldr	r0, [pc, #136]	; (8000844 <HAL_SPI_MspInit+0x110>)
 80007ba:	f000 fc81 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d0:	2305      	movs	r3, #5
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <HAL_SPI_MspInit+0x114>)
 80007dc:	f000 fc70 	bl	80010c0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007e2:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <HAL_SPI_MspInit+0x11c>)
 80007e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007ee:	2210      	movs	r2, #16
 80007f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_SPI_MspInit+0x118>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_SPI_MspInit+0x118>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <HAL_SPI_MspInit+0x118>)
 8000818:	f000 fa5a 	bl	8000cd0 <HAL_DMA_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8000822:	f7ff ff43 	bl	80006ac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_SPI_MspInit+0x118>)
 800082a:	655a      	str	r2, [r3, #84]	; 0x54
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_SPI_MspInit+0x118>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40003800 	.word	0x40003800
 8000840:	40021000 	.word	0x40021000
 8000844:	48000800 	.word	0x48000800
 8000848:	48000400 	.word	0x48000400
 800084c:	2000008c 	.word	0x2000008c
 8000850:	40020058 	.word	0x40020058

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6613      	str	r3, [r2, #96]	; 0x60
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6593      	str	r3, [r2, #88]	; 0x58
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f89c 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <DMA1_Channel5_IRQHandler+0x10>)
 80008f6:	f000 fb03 	bl	8000f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c

08000904 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000960 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f001 ff33 	bl	80027c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fdef 	bl	800053c <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000960:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800096c:	08006ab0 	.word	0x08006ab0
  ldr r2, =_sbss
 8000970:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000974:	200000d8 	.word	0x200000d8

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>

0800097a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f961 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f80e 	bl	80009ac <HAL_InitTick>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d002      	beq.n	800099c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e001      	b.n	80009a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800099c:	f7ff ff5a 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_InitTick+0x6c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d023      	beq.n	8000a08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_InitTick+0x70>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_InitTick+0x6c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f96d 	bl	8000cb6 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10f      	bne.n	8000a02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d809      	bhi.n	80009fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 f937 	bl	8000c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0x74>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e007      	b.n	8000a0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	e004      	b.n	8000a0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e001      	b.n	8000a0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200000d4 	.word	0x200000d4

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200000d4 	.word	0x200000d4

08000a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff ffee 	bl	8000a4c <HAL_GetTick>
 8000a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a7c:	d005      	beq.n	8000a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_Delay+0x44>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8a:	bf00      	nop
 8000a8c:	f7ff ffde 	bl	8000a4c <HAL_GetTick>
 8000a90:	4602      	mov	r2, r0
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8f7      	bhi.n	8000a8c <HAL_Delay+0x28>
  {
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e098      	b.n	8000e14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <HAL_DMA_Init+0x150>)
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d80f      	bhi.n	8000d0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <HAL_DMA_Init+0x154>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a4b      	ldr	r2, [pc, #300]	; (8000e28 <HAL_DMA_Init+0x158>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	009a      	lsls	r2, r3, #2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <HAL_DMA_Init+0x15c>)
 8000d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d0c:	e00e      	b.n	8000d2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_DMA_Init+0x160>)
 8000d16:	4413      	add	r3, r2
 8000d18:	4a43      	ldr	r2, [pc, #268]	; (8000e28 <HAL_DMA_Init+0x158>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	009a      	lsls	r2, r3, #2
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a42      	ldr	r2, [pc, #264]	; (8000e34 <HAL_DMA_Init+0x164>)
 8000d2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d86:	d039      	beq.n	8000dfc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <HAL_DMA_Init+0x15c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d11a      	bne.n	8000dc8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_DMA_Init+0x168>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 031c 	and.w	r3, r3, #28
 8000d9e:	210f      	movs	r1, #15
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4924      	ldr	r1, [pc, #144]	; (8000e38 <HAL_DMA_Init+0x168>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <HAL_DMA_Init+0x168>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6859      	ldr	r1, [r3, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	f003 031c 	and.w	r3, r3, #28
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	491d      	ldr	r1, [pc, #116]	; (8000e38 <HAL_DMA_Init+0x168>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]
 8000dc6:	e019      	b.n	8000dfc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_DMA_Init+0x16c>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd0:	f003 031c 	and.w	r3, r3, #28
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4917      	ldr	r1, [pc, #92]	; (8000e3c <HAL_DMA_Init+0x16c>)
 8000dde:	4013      	ands	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_DMA_Init+0x16c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6859      	ldr	r1, [r3, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 031c 	and.w	r3, r3, #28
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	4911      	ldr	r1, [pc, #68]	; (8000e3c <HAL_DMA_Init+0x16c>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40020407 	.word	0x40020407
 8000e24:	bffdfff8 	.word	0xbffdfff8
 8000e28:	cccccccd 	.word	0xcccccccd
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	bffdfbf8 	.word	0xbffdfbf8
 8000e34:	40020400 	.word	0x40020400
 8000e38:	400200a8 	.word	0x400200a8
 8000e3c:	400204a8 	.word	0x400204a8

08000e40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_DMA_Start_IT+0x20>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e04b      	b.n	8000ef8 <HAL_DMA_Start_IT+0xb8>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d13a      	bne.n	8000eea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2202      	movs	r2, #2
 8000e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0201 	bic.w	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f000 f8e0 	bl	800105e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 020e 	orr.w	r2, r2, #14
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e00f      	b.n	8000ed8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0204 	bic.w	r2, r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 020a 	orr.w	r2, r2, #10
 8000ed6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e005      	b.n	8000ef6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f003 031c 	and.w	r3, r3, #28
 8000f20:	2204      	movs	r2, #4
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d026      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x7a>
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d021      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d107      	bne.n	8000f54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0204 	bic.w	r2, r2, #4
 8000f52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f003 021c 	and.w	r2, r3, #28
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	2104      	movs	r1, #4
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d071      	beq.n	8001054 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000f78:	e06c      	b.n	8001054 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f003 031c 	and.w	r3, r3, #28
 8000f82:	2202      	movs	r2, #2
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d02e      	beq.n	8000fec <HAL_DMA_IRQHandler+0xec>
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d029      	beq.n	8000fec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10b      	bne.n	8000fbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 020a 	bic.w	r2, r2, #10
 8000fb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f003 021c 	and.w	r2, r3, #28
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	2102      	movs	r1, #2
 8000fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d038      	beq.n	8001054 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fea:	e033      	b.n	8001054 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff0:	f003 031c 	and.w	r3, r3, #28
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d02a      	beq.n	8001056 <HAL_DMA_IRQHandler+0x156>
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d025      	beq.n	8001056 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 020e 	bic.w	r2, r2, #14
 8001018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f003 021c 	and.w	r2, r3, #28
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	2101      	movs	r1, #1
 8001028:	fa01 f202 	lsl.w	r2, r1, r2
 800102c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001054:	bf00      	nop
 8001056:	bf00      	nop
}
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	f003 021c 	and.w	r2, r3, #28
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	2101      	movs	r1, #1
 800107a:	fa01 f202 	lsl.w	r2, r1, r2
 800107e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b10      	cmp	r3, #16
 800108e:	d108      	bne.n	80010a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80010a0:	e007      	b.n	80010b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	60da      	str	r2, [r3, #12]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ce:	e17f      	b.n	80013d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa01 f303 	lsl.w	r3, r1, r3
 80010dc:	4013      	ands	r3, r2
 80010de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8171 	beq.w	80013ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d005      	beq.n	8001100 <HAL_GPIO_Init+0x40>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b03      	cmp	r3, #3
 800116c:	d118      	bne.n	80011a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	6939      	ldr	r1, [r7, #16]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80ac 	beq.w	80013ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6613      	str	r3, [r2, #96]	; 0x60
 800127e:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <HAL_GPIO_Init+0x330>)
 8001280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_GPIO_Init+0x334>)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b4:	d025      	beq.n	8001302 <HAL_GPIO_Init+0x242>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4f      	ldr	r2, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x338>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d01f      	beq.n	80012fe <HAL_GPIO_Init+0x23e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	; (80013fc <HAL_GPIO_Init+0x33c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x23a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4d      	ldr	r2, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x340>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x236>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4c      	ldr	r2, [pc, #304]	; (8001404 <HAL_GPIO_Init+0x344>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x232>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4b      	ldr	r2, [pc, #300]	; (8001408 <HAL_GPIO_Init+0x348>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x22e>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4a      	ldr	r2, [pc, #296]	; (800140c <HAL_GPIO_Init+0x34c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x22a>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x244>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x244>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001314:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x350>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x350>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x350>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x350>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_GPIO_Init+0x350>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f ae78 	bne.w	80010d0 <HAL_GPIO_Init+0x10>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	48001000 	.word	0x48001000
 8001408:	48001400 	.word	0x48001400
 800140c:	48001800 	.word	0x48001800
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001430:	e002      	b.n	8001438 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001432:	887a      	ldrh	r2, [r7, #2]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_PWREx_GetVoltageRange+0x18>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40007000 	.word	0x40007000

08001460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146e:	d130      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147c:	d038      	beq.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2232      	movs	r2, #50	; 0x32
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a4:	e002      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d102      	bne.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f2      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014cc:	d110      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e00f      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d007      	beq.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e3ca      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151e:	4b97      	ldr	r3, [pc, #604]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001528:	4b94      	ldr	r3, [pc, #592]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80e4 	beq.w	8001708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_RCC_OscConfig+0x4a>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	f040 808b 	bne.w	8001664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 8087 	bne.w	8001664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001556:	4b89      	ldr	r3, [pc, #548]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x62>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e3a2      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_RCC_OscConfig+0x7c>
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	e005      	b.n	8001594 <HAL_RCC_OscConfig+0x88>
 8001588:	4b7c      	ldr	r3, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	4293      	cmp	r3, r2
 8001596:	d223      	bcs.n	80015e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fd1d 	bl	8001fdc <RCC_SetFlashLatencyFromMSIRange>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e383      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b73      	ldr	r3, [pc, #460]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a72      	ldr	r2, [pc, #456]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	496d      	ldr	r1, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	4b6c      	ldr	r3, [pc, #432]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4968      	ldr	r1, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
 80015de:	e025      	b.n	800162c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4960      	ldr	r1, [pc, #384]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b5f      	ldr	r3, [pc, #380]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	495b      	ldr	r1, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fcdd 	bl	8001fdc <RCC_SetFlashLatencyFromMSIRange>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e343      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800162c:	f000 fc4a 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001630:	4602      	mov	r2, r0
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	4950      	ldr	r1, [pc, #320]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 800163e:	5ccb      	ldrb	r3, [r1, r3]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <HAL_RCC_OscConfig+0x278>)
 800164a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x27c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f9ab 	bl	80009ac <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d052      	beq.n	8001706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	e327      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d032      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001678:	f7ff f9e8 	bl	8000a4c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001680:	f7ff f9e4 	bl	8000a4c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e310      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4931      	ldr	r1, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	492c      	ldr	r1, [pc, #176]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e01a      	b.n	8001708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016de:	f7ff f9b5 	bl	8000a4c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e6:	f7ff f9b1 	bl	8000a4c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e2dd      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1da>
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d074      	beq.n	80017fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x21a>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d10e      	bne.n	800173e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d064      	beq.n	80017fc <HAL_RCC_OscConfig+0x2f0>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d160      	bne.n	80017fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e2ba      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x24a>
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e026      	b.n	80017a4 <HAL_RCC_OscConfig+0x298>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175e:	d115      	bne.n	800178c <HAL_RCC_OscConfig+0x280>
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a02      	ldr	r2, [pc, #8]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x298>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	08006a68 	.word	0x08006a68
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004
 800178c:	4ba0      	ldr	r3, [pc, #640]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a9f      	ldr	r2, [pc, #636]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b9d      	ldr	r3, [pc, #628]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a9c      	ldr	r2, [pc, #624]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f94e 	bl	8000a4c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f94a 	bl	8000a4c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e276      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	4b92      	ldr	r3, [pc, #584]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2a8>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff f93a 	bl	8000a4c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f936 	bl	8000a4c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e262      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d0>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d060      	beq.n	80018cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x310>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d119      	bne.n	800184a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d116      	bne.n	800184a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x328>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e23f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	4973      	ldr	r1, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	e040      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d023      	beq.n	800189a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001852:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6e      	ldr	r2, [pc, #440]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff f8f5 	bl	8000a4c <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff f8f1 	bl	8000a4c <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e21d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001878:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	495f      	ldr	r1, [pc, #380]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	e018      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5c      	ldr	r2, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8d1 	bl	8000a4c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff f8cd 	bl	8000a4c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1f9      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03c      	beq.n	8001952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01c      	beq.n	800191a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e6:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff f8ac 	bl	8000a4c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff f8a8 	bl	8000a4c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1d4      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ef      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3ec>
 8001918:	e01b      	b.n	8001952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800191c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001920:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff f88f 	bl	8000a4c <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff f88b 	bl	8000a4c <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1b7      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ef      	bne.n	8001932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80a6 	beq.w	8001aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001988:	2301      	movs	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d118      	bne.n	80019ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a4:	f7ff f852 	bl	8000a4c <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7ff f84e 	bl	8000a4c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e17a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4d8>
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e2:	e029      	b.n	8001a38 <HAL_RCC_OscConfig+0x52c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x50c>
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x52c>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40007000 	.word	0x40007000
 8001a18:	4b9c      	ldr	r3, [pc, #624]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a97      	ldr	r2, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d016      	beq.n	8001a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff f804 	bl	8000a4c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f800 	bl	8000a4c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e12a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ed      	beq.n	8001a48 <HAL_RCC_OscConfig+0x53c>
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7fe ffed 	bl	8000a4c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ffe9 	bl	8000a4c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e113      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ed      	bne.n	8001a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a79      	ldr	r2, [pc, #484]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80fe 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	f040 80d0 	bne.w	8001c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ac0:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d130      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d127      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b00:	2a07      	cmp	r2, #7
 8001b02:	bf14      	ite	ne
 8001b04:	2201      	movne	r2, #1
 8001b06:	2200      	moveq	r2, #0
 8001b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d113      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d06e      	beq.n	8001c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d069      	beq.n	8001c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0ad      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a4b      	ldr	r2, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b64:	f7fe ff72 	bl	8000a4c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7fe ff6e 	bl	8000a4c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e09a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x784>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bac:	0852      	lsrs	r2, r2, #1
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	0552      	lsls	r2, r2, #21
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0652      	lsls	r2, r2, #25
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc4:	0912      	lsrs	r2, r2, #4
 8001bc6:	0452      	lsls	r2, r2, #17
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	4930      	ldr	r1, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be8:	f7fe ff30 	bl	8000a4c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe ff2c 	bl	8000a4c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0e:	e050      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d148      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c38:	f7fe ff08 	bl	8000a4c <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe ff04 	bl	8000a4c <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e030      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x734>
 8001c5e:	e028      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7fe feeb 	bl	8000a4c <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e00c      	b.n	8001c94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7fe fee7 	bl	8000a4c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d905      	bls.n	8001c94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4905      	ldr	r1, [pc, #20]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x7b4>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e001      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	feeefffc 	.word	0xfeeefffc

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0e7      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4970      	ldr	r1, [pc, #448]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0cf      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d908      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4960      	ldr	r1, [pc, #384]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d04c      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d121      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0a6      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e09a      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e08e      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e086      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4943      	ldr	r1, [pc, #268]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7fe fe4e 	bl	8000a4c <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7fe fe4a 	bl	8000a4c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e06e      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d208      	bcs.n	8001e0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d210      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	4923      	ldr	r1, [pc, #140]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e036      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4918      	ldr	r1, [pc, #96]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4910      	ldr	r1, [pc, #64]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e78:	f000 f824 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fd85 	bl	80009ac <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08006a68 	.word	0x08006a68
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d11e      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e005      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e004      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d134      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d003      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0xac>
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f6c:	617b      	str	r3, [r7, #20]
      break;
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f72:	617b      	str	r3, [r7, #20]
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	0e5b      	lsrs	r3, r3, #25
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	3301      	adds	r3, #1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08006a78 	.word	0x08006a78
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ff4:	f7ff fa26 	bl	8001444 <HAL_PWREx_GetVoltageRange>
 8001ff8:	6178      	str	r0, [r7, #20]
 8001ffa:	e014      	b.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a24      	ldr	r2, [pc, #144]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002014:	f7ff fa16 	bl	8001444 <HAL_PWREx_GetVoltageRange>
 8002018:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d10b      	bne.n	8002046 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d919      	bls.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2ba0      	cmp	r3, #160	; 0xa0
 8002038:	d902      	bls.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800203a:	2302      	movs	r3, #2
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e013      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002040:	2301      	movs	r3, #1
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e010      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d902      	bls.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800204c:	2303      	movs	r3, #3
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e00a      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d102      	bne.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e004      	b.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b70      	cmp	r3, #112	; 0x70
 8002062:	d101      	bne.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 0207 	bic.w	r2, r3, #7
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	40022000 	.word	0x40022000

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e095      	b.n	80021da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020be:	d009      	beq.n	80020d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fb20 	bl	8000734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800210a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002114:	d902      	bls.n	800211c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e002      	b.n	8002122 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800211c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002120:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800212a:	d007      	beq.n	800213c <HAL_SPI_Init+0xa0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002134:	d002      	beq.n	800213c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002174:	431a      	orrs	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217e:	ea42 0103 	orr.w	r1, r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	f003 0204 	and.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021b8:	ea42 0103 	orr.w	r1, r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_SPI_Transmit_DMA+0x20>
 8002200:	2302      	movs	r3, #2
 8002202:	e0d8      	b.n	80023b6 <HAL_SPI_Transmit_DMA+0x1d2>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d002      	beq.n	800221e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002218:	2302      	movs	r3, #2
 800221a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800221c:	e0c6      	b.n	80023ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_SPI_Transmit_DMA+0x46>
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800222e:	e0bd      	b.n	80023ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800227a:	d10f      	bne.n	800229c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800229a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	4a47      	ldr	r2, [pc, #284]	; (80023c0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	4a46      	ldr	r2, [pc, #280]	; (80023c4 <HAL_SPI_Transmit_DMA+0x1e0>)
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	4a45      	ldr	r2, [pc, #276]	; (80023c8 <HAL_SPI_Transmit_DMA+0x1e4>)
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b8:	2200      	movs	r2, #0
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ca:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022d4:	d82d      	bhi.n	8002332 <HAL_SPI_Transmit_DMA+0x14e>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	d127      	bne.n	8002332 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10f      	bne.n	8002310 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022fe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002304:	b29b      	uxth	r3, r3
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800230e:	e010      	b.n	8002332 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800231e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002324:	b29b      	uxth	r3, r3
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	3301      	adds	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	4619      	mov	r1, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	330c      	adds	r3, #12
 8002342:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002348:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800234a:	f7fe fd79 	bl	8000e40 <HAL_DMA_Start_IT>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800236c:	e01e      	b.n	80023ac <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d007      	beq.n	800238c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0220 	orr.w	r2, r2, #32
 800239a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0202 	orr.w	r2, r2, #2
 80023aa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	0800249b 	.word	0x0800249b
 80023c4:	080023f5 	.word	0x080023f5
 80023c8:	080024b7 	.word	0x080024b7

080023cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002402:	f7fe fb23 	bl	8000a4c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b20      	cmp	r3, #32
 8002414:	d03b      	beq.n	800248e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0220 	bic.w	r2, r2, #32
 8002424:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0202 	bic.w	r2, r2, #2
 8002434:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	2164      	movs	r1, #100	; 0x64
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f000 f97a 	bl	8002734 <SPI_EndRxTxTransaction>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2200      	movs	r2, #0
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	f7ff ffaa 	bl	80023e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800248c:	e002      	b.n	8002494 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7fe f844 	bl	800051c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff ff8f 	bl	80023cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0203 	bic.w	r2, r2, #3
 80024d2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	f043 0210 	orr.w	r2, r3, #16
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff79 	bl	80023e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002508:	f7fe faa0 	bl	8000a4c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002518:	f7fe fa98 	bl	8000a4c <HAL_GetTick>
 800251c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	015b      	lsls	r3, r3, #5
 8002524:	0d1b      	lsrs	r3, r3, #20
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	fb02 f303 	mul.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252e:	e054      	b.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d050      	beq.n	80025da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002538:	f7fe fa88 	bl	8000a4c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	429a      	cmp	r2, r3
 8002546:	d902      	bls.n	800254e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13d      	bne.n	80025ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800255c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d111      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002570:	d004      	beq.n	800257c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d107      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002594:	d10f      	bne.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e017      	b.n	80025fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	4013      	ands	r3, r2
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d19b      	bne.n	8002530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000

08002608 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800261a:	f7fe fa17 	bl	8000a4c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	4413      	add	r3, r2
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800262a:	f7fe fa0f 	bl	8000a4c <HAL_GetTick>
 800262e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002638:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00da      	lsls	r2, r3, #3
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	0d1b      	lsrs	r3, r3, #20
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002650:	e060      	b.n	8002714 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002658:	d107      	bne.n	800266a <SPI_WaitFifoStateUntilTimeout+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002668:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d050      	beq.n	8002714 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002672:	f7fe f9eb 	bl	8000a4c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	429a      	cmp	r2, r3
 8002680:	d902      	bls.n	8002688 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d13d      	bne.n	8002704 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002696:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a0:	d111      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d004      	beq.n	80026b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d107      	bne.n	80026c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ce:	d10f      	bne.n	80026f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e010      	b.n	8002726 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3b01      	subs	r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d196      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000

08002734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ff5b 	bl	8002608 <SPI_WaitFifoStateUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e027      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fec0 	bl	80024f8 <SPI_WaitFlagStateUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e014      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff34 	bl	8002608 <SPI_WaitFifoStateUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e000      	b.n	80027b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <__libc_init_array>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4d0d      	ldr	r5, [pc, #52]	; (80027f8 <__libc_init_array+0x38>)
 80027c4:	4c0d      	ldr	r4, [pc, #52]	; (80027fc <__libc_init_array+0x3c>)
 80027c6:	1b64      	subs	r4, r4, r5
 80027c8:	10a4      	asrs	r4, r4, #2
 80027ca:	2600      	movs	r6, #0
 80027cc:	42a6      	cmp	r6, r4
 80027ce:	d109      	bne.n	80027e4 <__libc_init_array+0x24>
 80027d0:	4d0b      	ldr	r5, [pc, #44]	; (8002800 <__libc_init_array+0x40>)
 80027d2:	4c0c      	ldr	r4, [pc, #48]	; (8002804 <__libc_init_array+0x44>)
 80027d4:	f000 f820 	bl	8002818 <_init>
 80027d8:	1b64      	subs	r4, r4, r5
 80027da:	10a4      	asrs	r4, r4, #2
 80027dc:	2600      	movs	r6, #0
 80027de:	42a6      	cmp	r6, r4
 80027e0:	d105      	bne.n	80027ee <__libc_init_array+0x2e>
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e8:	4798      	blx	r3
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7ee      	b.n	80027cc <__libc_init_array+0xc>
 80027ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f2:	4798      	blx	r3
 80027f4:	3601      	adds	r6, #1
 80027f6:	e7f2      	b.n	80027de <__libc_init_array+0x1e>
 80027f8:	08006aa8 	.word	0x08006aa8
 80027fc:	08006aa8 	.word	0x08006aa8
 8002800:	08006aa8 	.word	0x08006aa8
 8002804:	08006aac 	.word	0x08006aac

08002808 <memset>:
 8002808:	4402      	add	r2, r0
 800280a:	4603      	mov	r3, r0
 800280c:	4293      	cmp	r3, r2
 800280e:	d100      	bne.n	8002812 <memset+0xa>
 8002810:	4770      	bx	lr
 8002812:	f803 1b01 	strb.w	r1, [r3], #1
 8002816:	e7f9      	b.n	800280c <memset+0x4>

08002818 <_init>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

08002824 <_fini>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr
